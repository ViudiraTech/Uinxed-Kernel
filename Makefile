# =====================================================
#
#      Makefile
#      Uinxed compile script
#
#      2024/6/23 By Rainy101112
#      Based on GPL-3.0 open source agreement
#      Copyright Â© 2020 ViudiraTech, based on the GPLv3 agreement.
#
# =====================================================

ifeq ($(VERBOSE), 1)
  V=
  Q=
else
  V=@printf "\033[1;32m[Build]\033[0m $@ ...\n";
  Q=@
endif

IMAGE_PREFIXES := .1.tmp .2.tmp .3.tmp

C_SOURCES      := $(shell find * -name "*.c")
S_SOURCES      := $(shell find * -name "*.s")
HEADERS        := $(shell find * -name "*.h")
OBJS           := $(C_SOURCES:%.c=%.o) $(S_SOURCES:%.s=%.o)
DEPS           := $(OBJS:%.o=%.d)
LIBS           := $(wildcard libs/lib*.a)
PWD            := $(shell pwd)
CHECKS	       := -checks=-*,clang-analyzer-*,bugprone-*,cert-*,misc-*,performance-*,portability-*,-misc-include-cleaner,-clang-analyzer-security.insecureAPI.*

QEMU           := qemu-system-x86_64
QEMU_FLAGS     := -machine q35 -bios assets/ovmf-code.fd

# If you want to get more details of `dump_stack`, you need to replace `-O3` with `-O0` or '-Os'.
# `-fno-optimize-sibling-calls` is for `dump_stack` to work properly.
C_FLAGS        := -Wall -Wextra -O3 -m64 -ffreestanding -fno-optimize-sibling-calls -fno-pie -fno-stack-protector -fno-omit-frame-pointer \
                  -mcmodel=kernel -mno-red-zone -mno-80387 -mno-mmx -mno-sse -mno-sse2 -msoft-float -I include -MMD
LD_FLAGS       := -nostdlib -static -T assets/linker.ld -m elf_x86_64
AS_FLAGS       := -g --64

all: info Uinxed-x64.iso

%.o: %.c
	$(V)$(CC) $(C_FLAGS) -c -o $@ $<

%.o: %.s
	$(V)$(AS) $(AS_FLAGS) -o $@ $<

%.fmt: %
	$(Q)printf "\033[1;32m[Format]\033[0m $< ...\n"
	$(Q)clang-format -i $<

%.tidy: %
	$(Q)printf "\033[1;32m[Checks]\033[0m $< ...\n"
	$(Q)clang-tidy $< $(CHECKS) -- $(C_FLAGS)

info:
	$(Q)printf "Uinxed-Kernel Compile Script.\n"
	$(Q)printf "Copyright 2020 ViudiraTech. Based on the GPLv3 license.\n"
	$(Q)printf "Based on the GPL-3.0 open source license.\n"
	$(Q)echo

UxImage: $(OBJS) $(LIBS)
	$(V)$(LD) $(LD_FLAGS) -o $@ $^

Uinxed-x64.iso: UxImage
	$(Q)echo
	$(Q)printf "\033[1;32m[ISO]\033[0m Packing ISO file...\n"
	$(Q)cp -a assets/Limine iso
	$(Q)cp $< iso/efi/boot
	$(Q)xorriso -as mkisofs -R -r -J -iso-level 3 --efi-boot /efi/boot/limine-uefi-cd.bin -o Uinxed-x64.iso iso

	$(Q)$(RM) -rf iso
	$(Q)printf "\033[1;32m[Done]\033[0m Compilation complete.\n\n"

.PHONY: run clean gen.clangd format check

run: Uinxed-x64.iso
	$(QEMU) $(QEMU_FLAGS) -cdrom $<
	$(Q)echo

clean:
	$(Q)$(RM) $(OBJS) $(DEPS) UxImage Uinxed-x64.iso
	$(Q)printf "\033[1;32m[Done]\033[0m Clean completed.\n\n"

gen.clangd:
	$(Q)$(RM) -f .clangd
	$(Q)echo "# Generated by Makefile" >> .clangd
	$(Q)sed "s/\$${workspaceFolder}/$(subst /,\/,${PWD})/g" .clangd_template >> .clangd
	$(Q)printf "\033[1;32m[Done]\033[0m .clangd configuration generated.\n\n"

format: $(C_SOURCES:%=%.fmt) $(S_SOURCES:%=%.fmt) $(HEADERS:%=%.fmt)
	$(Q)printf "\033[1;32m[Done]\033[0m Code Format complete.\n\n"

check: $(C_SOURCES:%=%.tidy) $(S_SOURCES:%=%.tidy) $(HEADERS:%=%.tidy)
	$(Q)printf "\033[1;32m[Done]\033[0m Code Checks complete.\n\n"

-include $(DEPS)
